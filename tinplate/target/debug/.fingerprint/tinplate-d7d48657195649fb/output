{"message":"unused import: `std::collections::HashMap`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/requests.rs","byte_start":64,"byte_end":89,"line_start":3,"line_end":3,"column_start":5,"column_end":30,"is_primary":true,"text":[{"text":"use std::collections::HashMap;","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/requests.rs","byte_start":60,"byte_end":90,"line_start":3,"line_end":3,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"use std::collections::HashMap;","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::collections::HashMap`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/requests.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::collections::HashMap;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `std::fs::File`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/requests.rs","byte_start":95,"byte_end":108,"line_start":4,"line_end":4,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"use std::fs::File;","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/requests.rs","byte_start":91,"byte_end":109,"line_start":4,"line_end":4,"column_start":1,"column_end":19,"is_primary":true,"text":[{"text":"use std::fs::File;","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::fs::File`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/requests.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::fs::File;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `std::io::prelude::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/requests.rs","byte_start":114,"byte_end":133,"line_start":5,"line_end":5,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"use std::io::prelude::*;","highlight_start":5,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/requests.rs","byte_start":110,"byte_end":134,"line_start":5,"line_end":5,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"use std::io::prelude::*;","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::io::prelude::*`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/requests.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::io::prelude::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `observer::Observer`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":321,"byte_end":339,"line_start":19,"line_end":19,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use observer::Observer;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":317,"byte_end":340,"line_start":19,"line_end":19,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use observer::Observer;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `observer::Observer`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:19:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse observer::Observer;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `client::Client`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":345,"byte_end":359,"line_start":20,"line_end":20,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use client::Client;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":341,"byte_end":360,"line_start":20,"line_end":20,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"use client::Client;","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `client::Client`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:20:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse client::Client;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `dataframe::DataFrame`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":365,"byte_end":385,"line_start":21,"line_end":21,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"use dataframe::DataFrame;","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":361,"byte_end":386,"line_start":21,"line_end":21,"column_start":1,"column_end":26,"is_primary":true,"text":[{"text":"use dataframe::DataFrame;","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `dataframe::DataFrame`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:21:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse dataframe::DataFrame;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `sha1::Sha1`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":391,"byte_end":401,"line_start":22,"line_end":22,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"use sha1::Sha1;","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":387,"byte_end":402,"line_start":22,"line_end":22,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"use sha1::Sha1;","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `sha1::Sha1`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:22:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sha1::Sha1;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`request::Request` doesn't implement `std::fmt::Debug`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::core::macros::assert_eq macros>","byte_start":318,"byte_end":330,"line_start":13,"line_end":13,"column_start":19,"column_end":31,"is_primary":true,"text":[{"text":"                  & * left_val, & * right_val)","highlight_start":19,"highlight_end":31}],"label":"`request::Request` cannot be formatted using `{:?}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::std::macros::panic macros>","byte_start":343,"byte_end":388,"line_start":10,"line_end":10,"column_start":9,"column_end":54,"is_primary":false,"text":[{"text":"     (& $ crate :: format_args ! ($ fmt, $ ($ arg) +), &","highlight_start":9,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::core::macros::assert_eq macros>","byte_start":201,"byte_end":346,"line_start":9,"line_end":13,"column_start":18,"column_end":47,"is_primary":false,"text":[{"text":"                 panic !","highlight_start":18,"highlight_end":25},{"text":"                 (r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":57},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#,","highlight_start":1,"highlight_end":18},{"text":"                  & * left_val, & * right_val)","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/request.rs","byte_start":8409,"byte_end":8430,"line_start":245,"line_end":245,"column_start":5,"column_end":26,"is_primary":false,"text":[{"text":"    assert_eq!(req,req_);","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"<::core::macros::assert_eq macros>","byte_start":0,"byte_end":940,"line_start":1,"line_end":36,"column_start":1,"column_end":6,"is_primary":false,"text":[{"text":"($ left : expr, $ right : expr) =>","highlight_start":1,"highlight_end":35},{"text":"({","highlight_start":1,"highlight_end":3},{"text":"     match (& $ left, & $ right)","highlight_start":1,"highlight_end":33},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         (left_val, right_val) =>","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             if ! (* left_val == * right_val)","highlight_start":1,"highlight_end":46},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 panic !","highlight_start":1,"highlight_end":25},{"text":"                 (r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":57},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#,","highlight_start":1,"highlight_end":18},{"text":"                  & * left_val, & * right_val)","highlight_start":1,"highlight_end":47},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         }","highlight_start":1,"highlight_end":11},{"text":"     }","highlight_start":1,"highlight_end":7},{"text":" }) ; ($ left : expr, $ right : expr,) =>","highlight_start":1,"highlight_end":42},{"text":"({ $ crate :: assert_eq ! ($ left, $ right) }) ;","highlight_start":1,"highlight_end":49},{"text":"($ left : expr, $ right : expr, $ ($ arg : tt) +) =>","highlight_start":1,"highlight_end":53},{"text":"({","highlight_start":1,"highlight_end":3},{"text":"     match (& ($ left), & ($ right))","highlight_start":1,"highlight_end":37},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         (left_val, right_val) =>","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             if ! (* left_val == * right_val)","highlight_start":1,"highlight_end":46},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 panic !","highlight_start":1,"highlight_end":25},{"text":"                 (r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":57},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#,","highlight_start":1,"highlight_end":22},{"text":"                  & * left_val, & * right_val, $ crate :: format_args !","highlight_start":1,"highlight_end":72},{"text":"                  ($ ($ arg) +))","highlight_start":1,"highlight_end":33},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         }","highlight_start":1,"highlight_end":11},{"text":"     }","highlight_start":1,"highlight_end":7},{"text":" }) ;","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic!","def_site_span":{"file_name":"<::std::macros::panic macros>","byte_start":0,"byte_end":473,"line_start":1,"line_end":12,"column_start":1,"column_end":6,"is_primary":false,"text":[{"text":"() => ({ $ crate :: panic ! (\"explicit panic\") }) ; ($ msg : expr) =>","highlight_start":1,"highlight_end":70},{"text":"({","highlight_start":1,"highlight_end":3},{"text":"     $ crate :: rt :: begin_panic","highlight_start":1,"highlight_end":34},{"text":"     ($ msg, &","highlight_start":1,"highlight_end":15},{"text":"      ($ crate :: file ! (), $ crate :: line ! (), $ crate :: column ! ()))","highlight_start":1,"highlight_end":76},{"text":" }) ; ($ msg : expr,) => ({ $ crate :: panic ! ($ msg) }) ;","highlight_start":1,"highlight_end":60},{"text":"($ fmt : expr, $ ($ arg : tt) +) =>","highlight_start":1,"highlight_end":36},{"text":"({","highlight_start":1,"highlight_end":3},{"text":"     $ crate :: rt :: begin_panic_fmt","highlight_start":1,"highlight_end":38},{"text":"     (& $ crate :: format_args ! ($ fmt, $ ($ arg) +), &","highlight_start":1,"highlight_end":57},{"text":"      ($ crate :: file ! (), $ crate :: line ! (), $ crate :: column ! ()))","highlight_start":1,"highlight_end":76},{"text":" }) ;","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"<::core::macros::builtin::format_args macros>","byte_start":0,"byte_end":74,"line_start":1,"line_end":1,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"($ fmt : expr) => { { } } ; ($ fmt : expr, $ ($ args : tt) *) => { { } } ;","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Debug` is not implemented for `request::Request`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `#[derive(Debug)]` or manually implement `std::fmt::Debug`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::fmt::Debug` for `&request::Request`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `std::fmt::Debug::fmt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `request::Request` doesn't implement `std::fmt::Debug`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/request.rs:245:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m245\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert_eq!(req,req_);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`request::Request` cannot be formatted using `{:?}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Debug` is not implemented for `request::Request`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::fmt::Debug` for `&request::Request`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::fmt::Debug::fmt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`request::Request` doesn't implement `std::fmt::Debug`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::core::macros::assert_eq macros>","byte_start":332,"byte_end":345,"line_start":13,"line_end":13,"column_start":33,"column_end":46,"is_primary":true,"text":[{"text":"                  & * left_val, & * right_val)","highlight_start":33,"highlight_end":46}],"label":"`request::Request` cannot be formatted using `{:?}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::std::macros::panic macros>","byte_start":343,"byte_end":388,"line_start":10,"line_end":10,"column_start":9,"column_end":54,"is_primary":false,"text":[{"text":"     (& $ crate :: format_args ! ($ fmt, $ ($ arg) +), &","highlight_start":9,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::core::macros::assert_eq macros>","byte_start":201,"byte_end":346,"line_start":9,"line_end":13,"column_start":18,"column_end":47,"is_primary":false,"text":[{"text":"                 panic !","highlight_start":18,"highlight_end":25},{"text":"                 (r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":57},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#,","highlight_start":1,"highlight_end":18},{"text":"                  & * left_val, & * right_val)","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/request.rs","byte_start":8409,"byte_end":8430,"line_start":245,"line_end":245,"column_start":5,"column_end":26,"is_primary":false,"text":[{"text":"    assert_eq!(req,req_);","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"<::core::macros::assert_eq macros>","byte_start":0,"byte_end":940,"line_start":1,"line_end":36,"column_start":1,"column_end":6,"is_primary":false,"text":[{"text":"($ left : expr, $ right : expr) =>","highlight_start":1,"highlight_end":35},{"text":"({","highlight_start":1,"highlight_end":3},{"text":"     match (& $ left, & $ right)","highlight_start":1,"highlight_end":33},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         (left_val, right_val) =>","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             if ! (* left_val == * right_val)","highlight_start":1,"highlight_end":46},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 panic !","highlight_start":1,"highlight_end":25},{"text":"                 (r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":57},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#,","highlight_start":1,"highlight_end":18},{"text":"                  & * left_val, & * right_val)","highlight_start":1,"highlight_end":47},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         }","highlight_start":1,"highlight_end":11},{"text":"     }","highlight_start":1,"highlight_end":7},{"text":" }) ; ($ left : expr, $ right : expr,) =>","highlight_start":1,"highlight_end":42},{"text":"({ $ crate :: assert_eq ! ($ left, $ right) }) ;","highlight_start":1,"highlight_end":49},{"text":"($ left : expr, $ right : expr, $ ($ arg : tt) +) =>","highlight_start":1,"highlight_end":53},{"text":"({","highlight_start":1,"highlight_end":3},{"text":"     match (& ($ left), & ($ right))","highlight_start":1,"highlight_end":37},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         (left_val, right_val) =>","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             if ! (* left_val == * right_val)","highlight_start":1,"highlight_end":46},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 panic !","highlight_start":1,"highlight_end":25},{"text":"                 (r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":57},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#,","highlight_start":1,"highlight_end":22},{"text":"                  & * left_val, & * right_val, $ crate :: format_args !","highlight_start":1,"highlight_end":72},{"text":"                  ($ ($ arg) +))","highlight_start":1,"highlight_end":33},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         }","highlight_start":1,"highlight_end":11},{"text":"     }","highlight_start":1,"highlight_end":7},{"text":" }) ;","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic!","def_site_span":{"file_name":"<::std::macros::panic macros>","byte_start":0,"byte_end":473,"line_start":1,"line_end":12,"column_start":1,"column_end":6,"is_primary":false,"text":[{"text":"() => ({ $ crate :: panic ! (\"explicit panic\") }) ; ($ msg : expr) =>","highlight_start":1,"highlight_end":70},{"text":"({","highlight_start":1,"highlight_end":3},{"text":"     $ crate :: rt :: begin_panic","highlight_start":1,"highlight_end":34},{"text":"     ($ msg, &","highlight_start":1,"highlight_end":15},{"text":"      ($ crate :: file ! (), $ crate :: line ! (), $ crate :: column ! ()))","highlight_start":1,"highlight_end":76},{"text":" }) ; ($ msg : expr,) => ({ $ crate :: panic ! ($ msg) }) ;","highlight_start":1,"highlight_end":60},{"text":"($ fmt : expr, $ ($ arg : tt) +) =>","highlight_start":1,"highlight_end":36},{"text":"({","highlight_start":1,"highlight_end":3},{"text":"     $ crate :: rt :: begin_panic_fmt","highlight_start":1,"highlight_end":38},{"text":"     (& $ crate :: format_args ! ($ fmt, $ ($ arg) +), &","highlight_start":1,"highlight_end":57},{"text":"      ($ crate :: file ! (), $ crate :: line ! (), $ crate :: column ! ()))","highlight_start":1,"highlight_end":76},{"text":" }) ;","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"<::core::macros::builtin::format_args macros>","byte_start":0,"byte_end":74,"line_start":1,"line_end":1,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"($ fmt : expr) => { { } } ; ($ fmt : expr, $ ($ args : tt) *) => { { } } ;","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Debug` is not implemented for `request::Request`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `#[derive(Debug)]` or manually implement `std::fmt::Debug`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::fmt::Debug` for `&request::Request`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `std::fmt::Debug::fmt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `request::Request` doesn't implement `std::fmt::Debug`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/request.rs:245:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m245\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert_eq!(req,req_);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`request::Request` cannot be formatted using `{:?}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Debug` is not implemented for `request::Request`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::fmt::Debug` for `&request::Request`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::fmt::Debug::fmt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
